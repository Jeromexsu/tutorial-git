# initialize a new project
```
git init
```

# git add - add new files, stage changes, explained 

```
git add <file> [files]
```
you can use . to add all files in the working directory

git add is used both for new and newly modified files, and in both cases it takes a snapshot of the given files and stages that content in the index, ready for inclusion in the next commit.

# making changes
Modify some files, then add their updated contents to the index use git add.
You can see what is about to be committed using git diff with the --cached option.
```
git diff --cached
```
(Without --cached, git diff will show you any changes that youâ€™ve made but not yet added to the index.)

# view project history
```
git log
```
use `-p` to see complete diffs at each step
use `--stat --summary` to get a nice summary

# branch
use `git branch` to create a new branch. We will create a new branch called beta in this project 
and modify this file on each branch.

to create a branch `git branch <branch_name>`
to switch to another branch `git switch <branch_name>` 
=======
[beta] now we are in a new branch, all the modification we made in main branch has disappeared.
I will write something in this section, commit it and see what will happen.

[main] I just switch to beta branch, add some text, commit and switch back.
As we can see, all modifications I made under beta branch are invisible under main branch.
=======

Use `git merge` to merge two branches. All conflicts will left in the file with marks.
You should resolve them mannually.

Use `git branch -d <branch_name> to delete branch.

# Collaboration
[changes below are made on another end]
We use git clone, git pull for collaboration.
Use `git clone` to clone another project manage by git.
Make and commit changes on local project.
Tell the remote end to merge changes by `git pull <remote_add> <branch_name>.

